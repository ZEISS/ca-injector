# Default values for ca-injector.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Provide a name in place of ca-injector for `app.kubernetes.io/name:` labels
nameOverride: ""

# Override the deployment namespace
namespaceOverride: ""

# Provide a name to substitute for the full names of resources
fullnameOverride: ""

# Labels to apply to all resources
commonLabels: {}
# scmhash: abc123
# myLabel: aakkmd

# Reference to one or more secrets to be used when pulling images
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# - name: "image-pull-secret"
# or
# - "image-pull-secret"

# Number of old replicasets to retain
# The default value is 10, 0 will garbage-collect old replicasets
revisionHistoryLimit: 10

# The default internal port is 10250 in order to work out-of-the-box in GKE private clusters and avoid adding firewall rules.
# internalPort: 10250
internalPort: 8443 # TODO: Container should listen on configurable internal port

# Admission webhook for CA injector
admissionWebhook:
  # Valid values: Fail, Ignore, IgnoreOnInstallOnly
  # IgnoreOnInstallOnly - If Release.IsInstall returns "true", set "Ignore" otherwise "Fail"
  failurePolicy: ""
  # The default timeoutSeconds is 10 and the maximum value is 30.
  timeoutSeconds: 10
  # A PEM encoded CA bundle which will be used to validate the webhook's server certificate.
  # If unspecified, system trust roots on the apiserver are used.
  caBundle: ""
  # If enabled, generate a self-signed certificate, then patch the webhook configurations with the generated data.
  # On chart upgrades (or if the secret exists) the cert will not be re-generated. You can use this to provide your own
  # certs ahead of time if you wish.
  #
  annotations: {}
  #   argocd.argoproj.io/hook: PreSync
  #   argocd.argoproj.io/hook-delete-policy: HookSucceeded
  patch:
    enabled: true
    image:
      registry: registry.k8s.io
      repository: ingress-nginx/kube-webhook-certgen
      tag: v20221220-controller-v1.5.1-58-g787ea74b6
      sha: ""
      pullPolicy: IfNotPresent
    resources: {}
    # Provide a priority class name to the webhook patching job
    priorityClassName: ""
    annotations: {}
    #   argocd.argoproj.io/hook: PreSync
    #   argocd.argoproj.io/hook-delete-policy: HookSucceeded
    podAnnotations: {}
    nodeSelector: {}
    affinity: {}
    tolerations: []

    # SecurityContext holds pod-level security attributes and common container settings.
    # This defaults to non root user with uid 2000 and gid 2000. *v1.PodSecurityContext  false
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    securityContext:
      runAsGroup: 2000
      runAsNonRoot: true
      runAsUser: 2000
      seccompProfile:
        type: RuntimeDefault

  # Security context for create job container
  createSecretJob:
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL

  # Security context for patch job container
  patchWebhookJob:
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL

  # Use certmanager to generate webhook certs
  certManager:
    enabled: false
    # self-signed root certificate
    rootCert:
      duration: ""  # default to be 5y
    admissionCert:
      duration: ""  # default to be 1y
    # issuerRef:
    #   name: "issuer"
    #   kind: "ClusterIssuer"

  # This enables injection of certifcate authorities in all namespaces,
  # with the exception of namespaces with "ca-injection:disabled" annotation
  # Only one environment should have this enabled.
  enableNamespacesByDefault: false

networkPolicy:
  # Enable creation of NetworkPolicy resources.
  enabled: false

  # Flavor of the network policy to use.
  # Can be:
  # * kubernetes for networking.k8s.io/v1/NetworkPolicy
  # * cilium     for cilium.io/v2/CiliumNetworkPolicy
  flavor: kubernetes

  # cilium:
  #   egress:

# Service account for CA injector to use.
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  create: true
  name: ""

# Configuration for CA injector service
service:
  annotations: {}
  labels: {}
  clusterIP: ""

  # Port to expose on each node
  # Only used if service.type is 'NodePort'
  nodePort: 30443

  # Additional ports to open for CA injector service
  # ref: https://kubernetes.io/docs/concepts/services-networking/service/#multi-port-services
  additionalPorts: []

  # Loadbalancer IP
  # Only use if service.type is "LoadBalancer"
  loadBalancerIP: ""
  loadBalancerSourceRanges: []

  # Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints
  externalTrafficPolicy: Cluster

  # Service type
  # NodePort, ClusterIP, LoadBalancer
  type: ClusterIP

  # List of IP addresses at which the CA injector service is available
  # Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
  externalIPs: []

# Labels to add to the CA injector deployment
labels: {}

# Annotations to add to the CA injector deployment
annotations: {}

# Labels to add to the CA injector pod
podLabels: {}

# Annotations to add to the CA injector pod
podAnnotations: {}

# Assign a PriorityClassName to pods if set
# priorityClassName: ""

# Define Log Format
# Use logfmt (default) or json logging
# logFormat: logfmt

# Decrease log verbosity to errors only
# logLevel: error

# Resource limits & requests
resources: {}
# limits:
#   cpu: 200m
#   memory: 200Mi
# requests:
#   cpu: 100m
#   memory: 100Mi

# Required for use in managed kubernetes clusters (such as AWS EKS) with custom CNI (such as calico),
# because control-plane managed by AWS cannot communicate with pods' IP CIDR and admission webhooks are not working
hostNetwork: false

# Define which Nodes the Pods are scheduled on.
# ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# Tolerations for use with node taints
# ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []
# - key: "key"
#   operator: "Equal"
#   value: "value"
#   effect: "NoSchedule"

# Assign custom affinity rules to the CA injector
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: kubernetes.io/e2e-az-name
  #         operator: In
  #         values:
  #         - e2e-az1
  #         - e2e-az2

dnsConfig: {}
  # nameservers:
  #   - 1.2.3.4
  # searches:
  #   - ns1.svc.cluster-domain.example
  #   - my.dns.search.suffix
  # options:
  #   - name: ndots
  #     value: "2"
  #   - name: edns0

securityContext:
  fsGroup: 65534
  runAsGroup: 65534
  runAsNonRoot: true
  runAsUser: 65534
  seccompProfile:
    type: RuntimeDefault

# Container-specific security context configuration
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
    - ALL

# Enable vertical pod autoscaler support for CA injector
verticalPodAutoscaler:
  enabled: false

  # Recommender responsible for generating recommendation for the object.
  # List should be empty (then the default recommender will generate the recommendation)
  # or contain exactly one recommender.
  # recommenders:
  # - name: custom-recommender-performance

  # List of resources that the vertical pod autoscaler can control. Defaults to cpu and memory
  controlledResources: []
  # Specifies which resource values should be controlled: RequestsOnly or RequestsAndLimits.
  # controlledValues: RequestsAndLimits

  # Define the max allowed resources for the pod
  maxAllowed: {}
  # cpu: 200m
  # memory: 100Mi
  # Define the min allowed resources for the pod
  minAllowed: {}
  # cpu: 200m
  # memory: 100Mi

  updatePolicy:
    # Specifies minimal number of replicas which need to be alive for VPA Updater to attempt pod eviction
    # minReplicas: 1
    # Specifies whether recommended updates are applied when a Pod is started and whether recommended updates
    # are applied during the life of a Pod. Possible values are "Off", "Initial", "Recreate", and "Auto".
    updateMode: Auto

# CA injector image
image:
  registry: docker.io
  repository: andrewstuart/ca-injector
  # if not set appVersion field from Chart.yaml is used
  tag: ""
  sha: ""
  pullPolicy: IfNotPresent
